{"version":3,"file":"validate.min.js","sources":["../src/validate.js"],"sourcesContent":["// validate is the automated way\n// to keep your json or model attributes valid\n\n// Instructions\n// --------------\n\n// To make a field mandatory set it equal to [] or set your rules instead\n\n//     var validations = { name: [] }\n\n//     var validations = { name: [ [v8n().fullname(), 'Enter your fullname'] ] }\n\n// To make a field not mandatory you can either no list it in your stack of field validations of set it to false\n\n//     var validations = { name: false }\n\n// Advanced topics:\n\n// 1. You can also send a function for validations so you can define your rules according to values received\n\n// 2. On rule array you can send a third value that is called 'getValue'.\n// That will be a function responsible for return a value to be validated for that field\n\n//     var validations = { name: [ [v8n().fullname(), 'Enter your fullname', ()=>{ return 'any other variable'; }] ] }\n\n// 3. If you want to test a value received in realtime from user input set validateAll to false\n\n//     vl.validate({ name: 'bd' }, {validateAll: false})\n\n// 4. Complex objects works well too.\n\n//     var json = {name: 'bd', contacts: [ {email: 'team@bd.org'} , {email: 'admin@bd.org'} ]};\n//     var validations = {name: [], 'contacts[][email]': []};\n//     vl.validate(json, {validations})\n\n// Examples\n// --------------\n\n//     - simple validation\n//     var validations = { name: [ [v8n().fullname(), 'Enter your fullname'] ] }\n//     var json = { name: 'someone' }\n//     var r;\n//     if((r = vl.validate(json, {validations}))!==null) {\n//          console.log(r);\n//     }\n\n//     - making a field just mandatory\n//     var validations = { name: [] }\n//     var json = { name: 'someone' }\n//     var r;\n//     if((r = vl.validate(json, {validations}))!==null) {\n//          console.log(r);\n//     }\n\n// CODE DOCUMENTED BELOW\n// --------------\n\n// --------------\n\n// Baseline setup\n// --------------\nimport v8n from 'v8n-bd';\nimport _ from 'underscore-bd';\n\nvar vl = {\n    validator: v8n,\n    deepValueSearch: _.deepValueSearch,\n    validateAll: true,\n    // replacement for backbone core method\n    _validate(attrs, options) {\n        if (!options.validate || !this.validate) {\n            return true;\n        }\n\n        // this line was causing trouble when changing model validations for existent rows (because rows would be invalid if some validations became necessary after the row was already stored)\n        // attrs = _.extend({}, this.attributes, attrs);\n        attrs = _.extend({}, attrs);\n\n        var error = (this.validationError =\n            this.validate(attrs, options) || null);\n        if (!error) {\n            return true;\n        }\n\n        this.trigger(\n            'invalid',\n            this,\n            error,\n            _.extend(options, { validationError: error })\n        );\n        return false;\n    },\n    // Core method the walk through fields and their set of rules applying each one of them\n    validate(attrs, options = {}) {\n        options = _.defaults(options, {\n            validateAll: this.validateAll,\n        });\n\n        var error = [],\n            validations = this.getValidations(attrs, options),\n            notEmptyValidation = this.validator().passesAnyOf(\n                this.validator().minLength(1),\n                this.validator().not.undefined().not.null().pattern(/.+/)\n            ),\n            isRequired = {};\n\n        // walk through fields listed as required\n        for (let field in validations) {\n            isRequired[field] = true;\n            var value = this.deepValueSearch(field, attrs, true);\n\n            // working with array so we can validate lists like 'contacts[][email]'\n            ((!_.isArray(value) && !_.isJSON(value)) ||\n                (!/\\[\\]\\[\\w+\\]/.test(field) && _.isArray(value))) && // ensure to pass the correct value to test length of lists\n                (value = [value]);\n            !_.isArray(validations[field]) &&\n                (validations[field] = [validations[field]]);\n\n            // walk through field rule specifications\n            for (let x in validations[field]) {\n                let validation = validations[field][x];\n\n                if (\n                    typeof validation[0] === 'boolean' ||\n                    typeof validation[0] === 'undefined'\n                ) {\n                    isRequired[field] = !(validation === false);\n                    if (!isRequired[field]) {\n                        continue;\n                    }\n                    // if is required, set default validation and error message for it\n                    validation = [\n                        notEmptyValidation,\n                        validation[1] || this.getRequiredErrorMessage(field),\n                        validation[2] || null,\n                    ];\n                }\n\n                error = error.concat(\n                    this.validateValues(\n                        value,\n                        isRequired[field],\n                        options.validateAll,\n                        field,\n                        attrs,\n                        validation\n                    )\n                );\n            }\n        }\n\n        return error.length > 0 ? error : null;\n    },\n    validateValues(value, isRequired, validateAll, field, attrs, validation) {\n        var error = [];\n        for (var x in value) {\n            error = error.concat(\n                this.validateValue(\n                    x,\n                    value[x],\n                    isRequired,\n                    validateAll,\n                    field,\n                    attrs,\n                    validation\n                )\n            );\n        }\n\n        return error;\n    },\n    validateValue(x, value, isRequired, validateAll, field, attrs, validation) {\n        var error = [];\n        let validationValue = this.getValidationValue(\n            validation,\n            value,\n            attrs,\n            field\n        );\n        if (\n            this.isRequiredNow(validationValue, isRequired, validateAll) &&\n            !this.isValid(field, attrs, validation[0], validationValue)\n        ) {\n            error.push([field, validation[1], x]);\n        }\n\n        return error;\n    },\n    getValidationValue(validation, value, attrs, field) {\n        if (!validation[2] || typeof validation[2] !== 'function') {\n            return value;\n        }\n\n        var allAttrs = _.extend({}, this.attributes, attrs);\n        return validation[2](value, allAttrs, field);\n    },\n    getValidations(attrs, options = {}) {\n        var definedValidations = _.result2(\n            this,\n            'validations',\n            {},\n            [attrs, options],\n            this\n        ),\n            validations = _.result2(\n                options,\n                'validations',\n                definedValidations,\n                [attrs, options],\n                this\n            );\n\n        return validations;\n    },\n    // Run through all validations to collect mandatory fields and validations\n    getMandatoryValidations(attrs, options = {}) {\n        var validations = this.getValidations(attrs, options),\n            mandatory = {};\n\n        // walk through fields listed as required\n        for (let field in validations) {\n            !_.isArray(validations[field]) &&\n                (validations[field] = [validations[field]]);\n            // walk through field rule specifications\n            for (let x in validations[field]) {\n                let validation = validations[field][x];\n                if (\n                    typeof validation[0] === 'undefined' ||\n                    (typeof validation[0] === 'boolean' &&\n                        validation[0] !== false) ||\n                    (typeof validation[0] === 'object' &&\n                        !validation[0].test(''))\n                ) {\n                    !(field in mandatory) && (mandatory[field] = []);\n                    mandatory[field].push(validation);\n                }\n            }\n        }\n\n        return mandatory;\n    },\n    // A field will be required when its present in the set of rules - even if its value is an empty [] -\n    // AND (its present in the values received OR (its set as required and validate all was set true)) .\n    // A bit confusing I know. But this will allow you to run validate in your form everytime a field is changed avoiding\n    // to alert of invalid fields that yet weren't filled by the guest\n    isRequiredNow(input, fieldRequired = false, validateAll) {\n        // the field will be required only if its value was sent or if its set as required (even without a specific rule)\n        return (\n            typeof input !== 'undefined' || (!!fieldRequired && !!validateAll)\n        );\n    },\n    // Apply the rule test to value received. value, attrs inputted and field name are sent to validation method - it can be handy.\n    isValid(field, attrs, validation, value) {\n        if (!validation.test(value)) {\n            return false;\n        }\n        return true;\n    },\n    requiredErrorMessage: 'Field *{{field}}* cannot be empty',\n    getRequiredErrorMessage(field) {\n        return _.template(this.requiredErrorMessage)({\n            field,\n        });\n    },\n};\n\nexport default vl;\n"],"names":["vl","validator","deepValueSearch","validateAll","_validate","attrs","options","validate","this","_","extend","error","validationError","trigger","defaults","validations","getValidations","notEmptyValidation","passesAnyOf","minLength","not","undefined","null","pattern","isRequired","field","value","isArray","isJSON","test","x","validation","getRequiredErrorMessage","concat","validateValues","length","validateValue","validationValue","getValidationValue","isRequiredNow","isValid","push","allAttrs","attributes","definedValidations","result2","getMandatoryValidations","mandatory","input","fieldRequired","requiredErrorMessage","template"],"mappings":"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"}